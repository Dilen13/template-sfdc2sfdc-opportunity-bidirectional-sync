<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:data-mapper="http://www.mulesoft.org/schema/mule/ee/data-mapper" xmlns:batch="http://www.mulesoft.org/schema/mule/batch"
	xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking"
	xmlns:sfdc="http://www.mulesoft.org/schema/mule/sfdc" xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" version="EE-3.5.1"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/sfdc http://www.mulesoft.org/schema/mule/sfdc/current/mule-sfdc.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/ee/data-mapper http://www.mulesoft.org/schema/mule/ee/data-mapper/current/mule-data-mapper.xsd">
    <data-mapper:config name="XML_To_Opportunity" transformationGraphPath="xml_to_opportunity.grf" doc:name="XML_To_Opportunity"/>
    <flow name="triggerPushFlow" doc:name="triggerPushFlow" initialState="started">
        <http:inbound-endpoint exchange-pattern="request-response" host="localhost" port="${http.port}" contentType="text/xml" doc:name="HTTP"/>
        <choice doc:name="Trigger Policy">
            <when expression="#['push' == '${trigger.policy}']">
                <expression-component doc:name="lock processing to avoid two syncs occurring at the same time"><![CDATA[app.registry['PollSynchronizer'].lock();]]></expression-component>
                <set-variable variableName="sourceSystem" value="#[message.inboundProperties['source']]" doc:name="set 'sourceSystem' variable"/>
                <object-to-string-transformer doc:name="Object to String"/>
                <logger message="Message from outbound : #[payload]" level="INFO" doc:name="Log input payload"/>
                <data-mapper:transform config-ref="XML_To_Opportunity" doc:name="XML To Opportunity"/>
                <foreach doc:name="For Each Opportunity">
                    <expression-component doc:name="transform LastModifiedDate Calendar to String"><![CDATA[import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.TimeZone;

// Format LastModifiedDate to Salesforce specific format
SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");
formatter.setTimeZone(TimeZone.getTimeZone("UTC"));

String date = formatter.format(new Date());

// Update LastModifiedDate with computed value
payload.put("LastModifiedDate", date+"Z");]]></expression-component>
                    <logger message="LASTMODIFIED: #[payload.get('LastModifiedDate')]" level="INFO" doc:name="Logger"/>
                </foreach>
                <choice doc:name="Trigger target system destination">
                    <when expression="#[flowVars['sourceSystem'] == 'A']">
                        <batch:execute name="syncBatchA" doc:name="trigger batch execution for syncBatchA"/>
                    </when>
                    <when expression="#[flowVars['sourceSystem'] == 'B']">
                        <batch:execute name="syncBatchB" doc:name="trigger batch execution for syncBatchB"/>
                    </when>
                    <otherwise>
                        <logger message="'sourceSystem' variable not found - message ignored" level="INFO" doc:name="Logger"/>
                    </otherwise>
                </choice>
            </when>
            <otherwise>
                <logger message="Trigger policy has been set to POLL. Skipping this message" level="INFO" doc:name="Logger"/>
            </otherwise>
        </choice>
        <set-payload value="&lt;soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/' xmlns:out='http://soap.sforce.com/2005/09/outbound'&gt;&lt;soapenv:Header/&gt;&lt;soapenv:Body&gt;&lt;out:notificationsResponse&gt;&lt;out:Ack&gt;true&lt;/out:Ack&gt;&lt;/out:notificationsResponse&gt;&lt;/soapenv:Body&gt;&lt;/soapenv:Envelope&gt;" doc:name="Set response body"/>
        <http:response-builder status="200" contentType="application/xml" doc:name="build Http response"/>
        <exception-strategy ref="defaultChoiceExceptionStrategy" doc:name="Reference Exception Strategy"/>
    </flow>

	<!-- This is the endponits file. In this file you should declare all your inbound and outbound endpoints, in order to control the access to your integration -->

    <flow name="triggerSyncFromAFlow" doc:name="triggerSyncFromAFlow" processingStrategy="synchronous" initialState="started">
		<poll doc:name="Poll">
			<fixed-frequency-scheduler frequency="${polling.frequency}" startDelay="10000" />
			<watermark variable="lastQueryDateA" default-expression="${watermark.default.expression}" selector="MAX" selector-expression="#[payload.LastModifiedDate]" />
            <processor-chain doc:name="Processor Chain">
                <sfdc:query config-ref="SalesforceA" query="dsql:SELECT Account.Id,Account.Name,Account.AccountNumber,Account.Description,Account.Industry,Account.NumberOfEmployees,Account.ParentId,Amount,CloseDate,LastModifiedById,LastModifiedDate,Name,StageName FROM Opportunity WHERE (Amount &gt; 5000 AND LastModifiedDate &gt; #[flowVars['lastQueryDateA']]) ORDER BY LastModifiedDate ASC LIMIT 200" doc:name="fetch opportunities from A"/>
            </processor-chain>

		</poll>
        <choice doc:name="Trigger Policy">
            <when expression="#['poll' == '${trigger.policy}']">
                <expression-component doc:name="lock processing to avoid two syncs occurring at the same time"><![CDATA[app.registry['PollSynchronizer'].lock();]]></expression-component>
                <batch:execute name="syncBatchA" doc:name="trigger syncBatchA execution"/>
            </when>
            <otherwise>
                <logger message="Trigger policy has been set to PUSH. Skipping this message" level="INFO" doc:name="Logger"/>
            </otherwise>
        </choice>
		<exception-strategy ref="defaultChoiceExceptionStrategy" doc:name="Reference Exception Strategy"/>        
    </flow>
    
	<flow name="triggerSyncFromBFlow" doc:name="triggerSyncFromBFlow" processingStrategy="synchronous" initialState="started">
   		<poll doc:name="Poll">
			<fixed-frequency-scheduler frequency="${polling.frequency}" startDelay="10000" />
			<watermark variable="lastQueryDateB" default-expression="${watermark.default.expression}" selector="MAX" selector-expression="#[payload.LastModifiedDate]" />
            <processor-chain doc:name="Processor Chain">
                <sfdc:query config-ref="SalesforceB" query="dsql:SELECT Account.Id,Account.Name,Account.AccountNumber,Account.Description,Account.Industry,Account.NumberOfEmployees,Account.ParentId,Amount,CloseDate,LastModifiedById,LastModifiedDate,Name,StageName FROM Opportunity WHERE (Amount &gt; 5000 AND LastModifiedDate &gt; #[flowVars['lastQueryDateB']]) ORDER BY LastModifiedDate ASC LIMIT 200" doc:name="fetch opportunities from B"/>
            </processor-chain>

		</poll>
        <choice doc:name="Trigger Policy">
            <when expression="#['poll' == '${trigger.policy}']">
                <expression-component doc:name="lock processing to avoid two syncs occurring at the same time"><![CDATA[app.registry['PollSynchronizer'].lock();]]></expression-component>
                <batch:execute name="syncBatchB" doc:name="trigger syncBatchB execution"/>
            </when>
            <otherwise>
                <logger message="Trigger policy has been set to PUSH. Skipping this message" level="INFO" doc:name="Logger"/>
            </otherwise>
        </choice>
        <exception-strategy ref="defaultChoiceExceptionStrategy" doc:name="Reference Exception Strategy"/>
    </flow>

</mule>
